@model CustomerChat.Models.CustomerRequestViewModel

<style>
    #chatMainWindow {
   
        background-color: slategray;
        display: none;
        height: 150px;
        width: 750px;
        padding: 10px;
    }

  
    
    .agent {
        float: left;
        text-align: left;
        width: 750px;
    }

    .customer {
        float: right;
        text-align: right;
        width: 750px;
    }


 </style>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="jumbotron" id="divWelcomeCustomer" >
  <h2>Welcome @Model.CustomerName</h2>
  <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
  <hr class="my-4">
  <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
  <a class="btn btn-primary btn-lg" href="/Home/Index" role="button">Return</a>
</div>

<div class="jumbotron" id="divWelcomeAgent" >
    <h2>Hello Agent</h2>
</div>



<div id="chatMainWindow">
    <div class="input-group boton">
        <input type="text" id="messageText" class="form-control" placeholder="Typer your message" aria-label="Recipient's username" aria-describedby="button-addon2">
        <div class="input-group-append">
            <button class="btn btn-outline-primary" type="button" id="sendMessage">Send</button>
        </div>
    </div>
</div>



    
<script type="text/javascript">



    var countInt = parseInt('@Model.IdAgent');
    var agentAvailable = null;
    var agentFound = false;
    var intents = 0;
    var recurrente;

    var chatwindow = $('#chatMainWindow');


    var checkAgent = function () {
        $.ajax({
            url: "/Chat/GetAvailableAgent",
            data: { idRequest: '@Model.RequestId' },
                success: function (data) {
                    if (data.result) {

                        agentAvailable = data.data;
                        clearInterval(recurrente);
                        retrieveAgentInfo(agentAvailable);

                    } else {
                        intents++;

                        console.log("1");
                        if (intents == 10) {
                            clearInterval(recurrente);
                            retrieveAgentInfo(null);
                            alert("No Agents Available, please wait a little bit longer...");
                        }
                    }
                },
                error: function (err) {
                    alert("An error has occured...")
                    console.log(err);
                }
            });
    };


    function sendMessageButton() {



        var size = chatwindow.height();

        alert(chatwindow.height());

        chatwindow.css("height", size+ 'px' );

        
        var sender = "customer";
        if (countInt != 0) {
            sender = "agent";
        }

        createMessage(sender, $('#messageText').val());

        $('#messageText').val("");
    }

    function retrieveAgentInfo(agentAvailable, intents) {


        console.log(agentAvailable);
        debugger;

        var chatLi = document.createElement("div");

        chatLi.setAttribute("id", "ulidChat");
        chatLi.append("The agent " + agentAvailable.AgentName + " is now available to help you");


        chatwindow.prepend(chatLi);
        chatwindow.css('display', 'block');


        createMessage("agent", "It is nice to talk to you " + '@Model.CustomerName' + " please tell me how can I help you");
    


    }

    function createMessage(sender,message) {


        var name ='@Model.CustomerName';

        if (sender == "agent") {
            name = agentAvailable.AgentName;
        }

        $('#ulidChat').append("<div class=" + sender + "> <strong> " + name + " says: </strong> <br> " + message + " </div> </hr>")

    }

    $(function () {


        // it means this is a customer, thats why we need to search an agent
        if (countInt == 0) {
            $('#divWelcomeAgent').css('display', 'none');
            recurrente =  setInterval(checkAgent, 1000);
        }

        $('#sendMessage').on('click', function () {
            sendMessageButton();
        });
    });
</script>
