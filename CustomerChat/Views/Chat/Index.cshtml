@model CustomerChat.Models.CustomerRequestViewModel

<style>
    #chatMainWindow {
   
        background-color: slategray;
        display: none;
        height: 250px;
        width: 750px;
        padding: 10px;
        border-radius:5px;
    }

  
    
    .other {
        float: left;
        text-align: left;
        width: 750px;
    }

    .me {
        float: right;
        text-align: right;
        width: 750px;
    }

    #customerInfoForAgent {
        display:none;
        width: 750px;
    }



 </style>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="jumbotron" id="divWelcomeCustomer" >
  <h2>Welcome @Model.CustomerName</h2>
  <p class="lead">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
  <hr class="my-4">
  <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>
  <a class="btn btn-primary btn-lg" href="/Home/Index" role="button">Return</a>
</div>
<input type="hidden" id="conversationId" />
<input type="hidden" id="theotherName" />
<input type="hidden" id="myName" />
<input type="hidden" id="idAgent" />
<input type="hidden" id="whoAmI" />


<div id="divWelcomeAgent" >
    <h2>Hello Agent</h2>
</div>

<div id="customerInfoForAgent" class="col-md-6">

</div>


<div id="chatMainWindow">
    
</div>

<div class="input-group boton messageControls" style="width:750px;">
        <input type="text" id="messageText" class="form-control" placeholder="Typer your message" aria-label="Recipient's username" aria-describedby="button-addon2">
        <div class="input-group-append">
            <button class="btn btn-outline-primary" type="button" id="sendMessage">Send</button>
        </div>
    </div>



    
<script type="text/javascript">

    var countInt = parseInt('@Model.IdAgent');
    var agentAvailable = null;
    var agentFound = false;
    var intents = 0;
    var chatLi;
    // it stores the id where the message from both sides are gonna be.
    var idConversation = 0;
    var customerNameDisplay;
    var personName = '@Model.CustomerName';

    // Function that searchs an agent for a customer.
    var recurrente;

    //function that is constanly 
    var recurrentAgent;



    // function that search new messages.
    var recurrentMessages;

    var sizeIncrement = 1;
    var chatwindow = $('#chatMainWindow');


    var checkAgent = function () {
        $.ajax({
            url: "/Chat/GetAvailableAgent",
            data: { idRequest: '@Model.RequestId' },
                success: function (data) {
                    if (data.result) {

                        agentAvailable = data.data;

                        clearInterval(recurrente);
                        retrieveAgentInfo(agentAvailable, data.idRequestAgent);

                    } else {
                        intents++;

                        console.log(intents);
                        if (intents == 50) {
                            clearInterval(recurrente);
                            retrieveAgentInfo(null,0);
                            alert("No Agents Available, please wait a little bit longer...");
                        }
                    }
                },
                error: function (err) {
                    alert("An error has occured...");
                    clearInterval(recurrente);
                    console.log(err);
                }
            });
    };

    var searchMessages = function(){
        
        console.log("Me ejecut");
        if ($('#conversationId').val() == "0") {
            console.log("No estoy asignado a conversación")
            return;
        }

        $.ajax({
            url: "/Chat/GetMessages",
            data: { idConversation: $('#conversationId').val(), sender: $('#whoAmI').val() },
            success: function (data) {

                if (!data.isSuccess) {
                    clearInterval(recurrentMessages);
                }

                if (data.newMessages != "") {
                    var newMessages = JSON.parse(data.newMessages);

                    for (var i = 0; i < newMessages.length; i++) {
                        console.log(newMessages[i]);
                        displayMessage(newMessages[i].Sender, newMessages[i].Message, false);

                    }
                }

               
            },
            error: function (err) {
                console.log(err);
            }
        });

    }

    var checkUser = function () {

        $.ajax({
            url: "/Chat/getCustomer",
            data: { idAgent: '@Model.IdAgent' },
            success: function (data) {
                if (data.isAgentRequested) {

                    clearInterval(recurrentAgent);
                    retrieveCustomerInfo(data.customerName, data.requestAgent);
                }
            },
            error: function (err) {
                alert("An error has occured fetching the customer info...");
                clearInterval(recurrentAgent);
                console.log(err);
            }
            });

    }

    function sendMessageButton() {

    
        var sender = "customer";
        if (countInt != 0) {
            sender = "agent";
        }

        createMessage(sender, $('#messageText').val());


        displayMessage(sender, $('#messageText').val(),true);
        $('#messageText').val("");

    }

    function displayMessage(sender, message, me) {

        var divHeight = chatwindow.height() + 60;


        chatwindow.css("height", divHeight + 'px');


        var cssClass = "other";
        var senderName = $('#theotherName').val();

        if (me) {
            cssClass = "me";
            senderName = $('#myName').val();
        }
        chatwindow.append("<div class=" + cssClass + "> <strong> " + senderName + " says: </strong> <br> " + message + " </div>")
    }

    function retrieveCustomerInfo(customerDisplayName,conversationId) {


        alert("Setting the customer information");
        $('#conversationId').val(conversationId);
        //Store the other persons name
        $('#theotherName').val(customerDisplayName);


        idConversation = conversationId;
        $('#customerInfoForAgent').append("<div class='alert alert-primary' role='alert'> You have been asigned to  " + customerDisplayName + "  </div>");

        $('#customerInfoForAgent').css('display', 'inline');
        chatwindow.css('display', 'inline-block');
    }
    function retrieveAgentInfo(agentAvailable,conversationId) {



        //Store the other persons name
        $('#theotherName').val(agentAvailable.AgentName);


        $('#conversationId').val(conversationId);

        

        console.log(agentAvailable);
        console.log(idConversation);

        idConversation = conversationId;
        debugger;

        if (agentAvailable == null) {
            return;
        }

    
        chatLi.append("The agent " + agentAvailable.AgentName + " is now available to help you");


        chatwindow.prepend(chatLi);
        chatwindow.css('display', 'inline-block');


        createMessage("agent", "It is nice to talk to you " + '@Model.CustomerName' + " please tell me how can I help you");
    


    }

    function createMessage(sender,message) {


        var name ='@Model.CustomerName';

        //if (sender == "agent") {
        //    name = agentAvailable.AgentName;
        //}

        var messa = {
            Message:message,
            Sender: sender,
            IdConversation: idConversation,
            Read: false
        }


        var obj = { message: messa };

        var data2send = JSON.stringify(obj);

        $.ajax({
            type: "POST",
            url: 'Chat/BroadCastMessage',
            data: data2send,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) { //call successfull

                console.log(data);
                if (!data.result) {
                    alert("It was not possible to send the message, please contact your administrator");
                }
            },
            error: function (xhr) {
                alert("An error has occured sending the message");
            }
        });


        //$('#ulidChat').append("<div class=" + sender + "> <strong> " + name + " says: </strong> <br> " + message + " </div>")

    }

    $(function () {


        // when the pages load, there  is no conversation
        $('#conversationId').val('0');

        console.log($('#conversationId').val());

        //Store the persons name
        $('#myName').val('@Model.CustomerName');

        chatLi = document.createElement("div");
        chatLi.setAttribute("id", "ulidChat");


        if (true) {
            
        }


        // it means this is a customer, thats why we need to search an agent
        if (countInt == 0) {
            $('#divWelcomeAgent').css('display', 'none');
            $('#whoAmI').val('customer');
            recurrente = setInterval(checkAgent, 1000);
        } else {
            $('#whoAmI').val('agent');
            recurrentAgent = setInterval(checkUser, 1000);
            //$('.messageControls').css('display', 'none')
        }

        $('#sendMessage').on('click', function () {
            sendMessageButton();
        });

        if (countInt == 0) {
            $('#menu').css('display', 'none');
            $('#login').css('display', 'none');
        }

        recurrentMessages = setInterval(searchMessages,500);

    });
</script>
